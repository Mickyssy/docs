"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7564],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=p(n),u=a,g=h["".concat(l,".").concat(u)]||h[u]||d[u]||i;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},s="\ud83e\uddf0 SDK",o={unversionedId:"graphcast/sdk",id:"graphcast/sdk",title:"\ud83e\uddf0 SDK",description:"As mentioned before, the SDK is the base layer which is used to abstract all the necessary components of each Radio away from the",source:"@site/docs/graphcast/sdk.md",sourceDirName:"graphcast",slug:"/graphcast/sdk",permalink:"/graphcast/sdk",draft:!1,editUrl:"https://github.com/graphops/docs/edit/main/docs/graphcast/sdk.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"gnSidebar",previous:{title:"\u2699\ufe0f Design Principles",permalink:"/graphcast/design-principles"},next:{title:"\ud83e\uddd1\u200d\ud83d\udcbb Radio Development Intro",permalink:"/graphcast/radios/intro"}},l={},p=[{value:"Gossip Agent",id:"gossip-agent",level:2},{value:"Messenger",id:"messenger",level:3},{value:"Observer",id:"observer",level:3},{value:"ClientManager",id:"clientmanager",level:3},{value:"RadioFilter",id:"radiofilter",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-sdk"},"\ud83e\uddf0 SDK"),(0,a.kt)("p",null,"As mentioned before, the ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@graphops/graphcast"},"SDK")," is the base layer which is used to abstract all the necessary components of each Radio away from the\nuser. In the current Graphcast POC implementation that's achieved by a few classes that hold the needed functionality, we'll take\na deeper look at those classes below."),(0,a.kt)("h2",{id:"gossip-agent"},"Gossip Agent"),(0,a.kt)("p",null,"The main structure that holds the SDK logic is the ",(0,a.kt)("inlineCode",{parentName:"p"},"GossipAgent")," class, which looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class GossipAgent {\n  messenger: Messenger;\n  observer: Observer;\n  logger: Logger;\n  clientManager: ClientManager;\n  registry: Client;\n  radioFilter: RadioFilter;\n  waku?: Waku;\n  operator?: string;\n  indexer?: string;\n}\n")),(0,a.kt)("p",null,"The main properties we need to take note of are ",(0,a.kt)("inlineCode",{parentName:"p"},"messenger"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"observer"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"clientManager")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"radioFilter"),". We will look into what each of them does below."),(0,a.kt)("h3",{id:"messenger"},"Messenger"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Messenger")," class handles constructing, signing and propagating messages onto the Graphcast network. It also wraps the Radio-specific message payload with network metadata like nonce (UNIX timestamp), block number and block hash."),(0,a.kt)("h3",{id:"observer"},"Observer"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Observer")," class handles decoding and validating incoming messages. It also runs custom handler logic (defined by the Radio) in the form of a callback that takes the decoded and validated message payload as input."),(0,a.kt)("h3",{id:"clientmanager"},"ClientManager"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ClientManager")," class is a wrapper for a few other ones that handle interactions with different part of the stack that Graphcast needs to interact with. Let's break it down a bit more:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class ClientManager {\n  ethClient: EthClient;\n  networkSubgraph: Client;\n  registry: Client;\n  graphNodeStatus: Client;\n  indexerManagement: Client;\n}\n")),(0,a.kt)("p",null,"All of those properties represent different services that we need to query/send requests to."),(0,a.kt)("h3",{id:"radiofilter"},"RadioFilter"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"RadioFilter")," class includes all internal logic that has to do with security checks, as well as checks on the Indexer identity (identity resolution, minimum stake requirements, slashing and dispute history)."))}d.isMDXComponent=!0}}]);